{"version":3,"sources":["components/common/Alert.js","components/common/PageTitle.js","components/contact/EditContact.js","components/contact/TableContacts.js","components/contact/AddContact.js","pages/Contacts.js"],"names":["Alert","text","close","className","onClick","PageTitle","title","Modal","props","EditSchema","Yup","shape","name","required","email","phone","useState","editContactSuccess","setEditContactSuccess","editContactError","setEditContactError","editContact","setEditContact","submitContact","values","a","publicFetch","put","idCampus","contact","_id","data","message","response","setTimeout","setShowModal","window","location","reload","showModal","GradientBar","Card","initialValues","onSubmit","validationSchema","FormSuccess","FormError","type","value","Label","FormInput","ariaLabel","placeholder","GradientButton","loading","TableContacts","mResponse","setMResponse","show","setShow","setContact","deleteContact","id","delete","scope","contacts","map","key","aria-hidden","edit","icon","faEdit","faTrashAlt","AddCampus","AddContactSchema","addContactSuccess","setSignupSuccess","addContactError","setSignupError","addLoading","setLoginLoading","submitCredentials","credentials","post","showAddPanel","Contacts","showAdd","setShowAdd","setContacts","useParams","useEffect","get","listContacs","style","display","showPanel"],"mappings":"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","file":"static/js/5.bfd4799a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Alert({text, close}) {\n    return (\n        <>\n            <div className=\"text-white px-6 py-4 border-0 rounded relative mb-4 bg-teal-500\">\n                <span className=\"text-xl inline-block mr-5 align-middle\">\n                    <i className=\"fas fa-bell\" />\n                </span>\n                <span className=\"inline-block align-middle mr-8\">\n                    <b className=\"capitalize\">{text}</b>\n                </span>\n                <button className=\"absolute bg-transparent text-2xl font-semibold leading-none right-0 top-0 mt-4 mr-6 outline-none focus:outline-none\" onClick={close} >\n                    <span>Ã—</span>\n                </button>\n            </div>\n        </>\n    )\n}\n","import React from 'react';\n\nconst PageTitle = ({ title }) => (\n  <div className=\"my-1 sm:my-4\">\n    <h2 className=\"text-gray-800 font-bold text-2xl\">\n      {title}\n    </h2>\n  </div>\n);\n\nexport default PageTitle;\n","import React,{useState} from \"react\";\nimport GradientBar from '../common/GradientBar';\nimport Card from '../common/Card';\nimport { Form, Formik} from 'formik';\nimport FormSuccess from '../FormSuccess'\nimport FormError from '../common/FormError'\nimport FormInput from '../FormInput'\nimport Label from '../common/Label';\nimport GradientButton from '../common/GradientButton';\nimport * as Yup from 'yup';\nimport { publicFetch } from '../../util/fetch';\n\nexport default function Modal(props) {\n\n  const EditSchema = Yup.object().shape({\n    name: Yup.string().required(\n        'Contact name is required'\n    ), \n    email: Yup.string().required(\n        'Email is required'\n      ),\n    phone: Yup.string().required(\n        'phone is required'\n    ) \n    });\n    const [editContactSuccess, setEditContactSuccess] = useState();\n    const [editContactError, setEditContactError] = useState();\n    \n    \n    const [editContact, setEditContact] = useState(false);\n    \n    const submitContact = async values => {\n        try {\n            setEditContact(true);\n            const { data } = await publicFetch.put(\n                `${props.idCampus}/contact/${props.contact._id}`,\n                values\n            );\n    \n            setEditContactSuccess(data.message);\n            setEditContactError('');\n\n        }\n        catch (error) {\n            setEditContact(false);\n            const { data } = error.response;\n            setEditContactError(data.message);\n            setEditContactSuccess('');\n        }\n        finally{\n            setTimeout(() => {\n                props.setShowModal(false)\n                window.location.reload();\n            }, 1000);\n        }\n\n    };\n  return (\n    <>\n      {props.showModal ? (\n        <>\n            <section className=\"w-3/4 h-screen m-auto sm:pt-10\">\n                <GradientBar />\n                <Card>\n                    <div className=\"flex items-center justify-center py-7 px-2 sm:px-3 lg:px-3\">\n                        <div className=\"max-w-md w-full flex items-center justify-center\">\n                            <Formik\n                                initialValues={{\n                                    name: props.contact.name,\n                                    email: props.contact.email,\n                                    phone: props.contact.phone,\n                                }}\n                                onSubmit={values =>\n                                submitContact(values)\n                                }\n                                validationSchema={EditSchema}\n                            >\n                                {() => (\n                                <Form className=\"mt-8\">\n                                    {editContactSuccess && (\n                                    <FormSuccess text={editContactSuccess} />\n                                    )}\n                                    {editContactError && (\n                                    <FormError text={editContactError} />\n                                    )}\n                                    <input\n                                    type=\"hidden\"\n                                    name=\"remember\"\n                                    value=\"true\"\n                                    />\n                                    <div>\n                                        <div className=\"flex\">\n                                            <div className=\"mb-2 mr-2 w-64\">\n                                                <div className=\"mb-1\">\n                                                    <Label text=\"Name\" />\n                                                </div>\n                                                <FormInput\n                                                    ariaLabel=\"Name\"\n                                                    name=\"name\"\n                                                    type=\"text\"\n                                                    placeholder=\"Name\"\n                                                />\n                                            </div>\n                                            <div className=\"mb-2 ml-2 w-4/5\">\n                                                <div className=\"mb-1\">\n                                                    <Label text=\"Email\" />\n                                                </div>\n                                                <div>\n                                                <FormInput\n                                                    ariaLabel=\"Email\"\n                                                    name=\"email\"\n                                                    type=\"email\"\n                                                    placeholder=\"Email\"\n                                                />\n                                                </div>\n                                            </div>\n                                            <div className=\"mb-2 ml-3 w-64\">\n                                                <div className=\"mb-1\">\n                                                    <Label text=\"Phone\" />\n                                                </div>\n                                                <div>\n                                                <FormInput\n                                                    ariaLabel=\"Pnone\"\n                                                    name=\"phone\"\n                                                    type=\"phone\"\n                                                    placeholder=\"Phone\"\n                                                />\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"mt-6 flex items-center justify-center\">\n                                        <GradientButton\n                                            type=\"submit\"\n                                            text=\"Save\"\n                                            loading={editContact}\n                                        />\n                                    </div>\n                                </Form>\n                                )}\n                            </Formik>\n                        </div>\n                    </div>\n                </Card>\n            </section>\n        </>\n      ) : null}\n    </>\n  );\n}","import React,{useState} from 'react'\nimport Card from '../common/Card';\nimport GradientBar from '../common/GradientBar';\nimport { publicFetch } from '../../util/fetch';\nimport Alert from '../common/Alert'\nimport EditContact from './EditContact'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faEdit,\n  faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\n\nexport default function TableContacts(props) {\n\n    const [mResponse, setMResponse] = useState();\n    const [show, setShow] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [contact, setContact] = useState();\n\n    const deleteContact = async (id)=>{\n        try {\n            const { data } = await publicFetch.delete(\n            `${props.idCampus}/contact/delete/${id}` \n            );\n                \n            setMResponse(data.message)\n            setShow(true)\n        }\n        catch (error) {\n            const { data } = error.response;\n            setMResponse(data.message)\n            setShow(true)\n        }\n    }\n\n    const close = ()=>{\n        setShow(false)\n    }\n\n    const edit = (contact)=>{\n        setContact(contact)\n        setShowModal(true)\n    }\n\n    return (\n        <>\n            {showModal?<EditContact setShowModal={setShowModal} idCampus={props.idCampus} contact={contact} showModal={showModal}/>:<>\n            <GradientBar />\n            <Card>\n                {show?<Alert text={mResponse} close={close}/>:null}\n                <div className=\"inline-block min-w-full rounded-lg overflow-hidden\">\n                    <table className=\"min-w-full leading-normal\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\" className=\"py-3 bg-white  border-b border-gray-200 text-gray-800  text-center text-sm uppercase font-normal\">\n                                    name\n                                </th>\n                                <th scope=\"col\" className=\"py-3 bg-white  border-b border-gray-200 text-gray-800  text-center text-sm uppercase font-normal\">\n                                    phone\n                                </th>\n                                <th scope=\"col\" className=\"py-3 bg-white  border-b border-gray-200 text-gray-800  text-center text-sm uppercase font-normal\">\n                                    email\n                                </th>\n                                <th scope=\"col\" className=\"py-3 bg-white  border-b border-gray-200 text-gray-800  text-center text-sm uppercase font-normal\">\n                                    edit\n                                </th>\n                                <th scope=\"col\" className=\"py-3 bg-white  border-b border-gray-200 text-gray-800  text-center text-sm uppercase font-normal\">\n                                    delete\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {props.contacts.map((contact) => (\n                            <tr key={contact._id}>\n                                <td className=\"py-5 border-b border-gray-200 bg-white text-sm\">\n                                    <div className=\"flex items-center justify-center\">\n                                        <div className=\"ml-3\">\n                                            <p className=\"text-gray-900 whitespace-no-wrap\">\n                                                {contact.name}\n                                            </p>\n                                        </div>\n                                    </div>\n                                </td>\n                                <td className=\"py-5 border-b border-gray-200 bg-white text-sm text-center \">\n                                    <div className=\"flex items-center justify-center\">\n                                        <div className=\"ml-3\">\n                                            <p className=\"text-gray-900 whitespace-no-wrap\">\n                                                {contact.phone}\n                                            </p>\n                                        </div>\n                                    </div>\n                                </td>\n                                <td className=\"py-5 border-b border-gray-200 bg-white text-sm text-center \">\n                                    <span className=\"relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight\">\n                                        <span aria-hidden=\"true\" className=\"absolute inset-0 bg-green-200 opacity-50 rounded-full\">\n                                        </span>\n                                        <span className=\"relative\">\n                                            {contact.email}\n                                        </span>\n                                    </span>\n                                </td>\n                                <td className=\"py-5 border-b border-gray-200  text-sm items-center\">\n                                    <div className=\"flex justify-center\">\n                                        <button className=\"rounded-full shadow flex items-center px-3 py-3\" onClick={()=>edit(contact)}>\n                                            <FontAwesomeIcon icon={faEdit} />\n                                        </button>\n                                    </div>\n                                </td>\n                                <td className=\"py-5 border-b border-gray-200 text-sm items-center\">\n                                    <div className=\"flex justify-center\">\n                                        <button className=\"rounded-full shadow hover:text-indigo-900 flex items-center px-3 py-3 \" onClick={()=>deleteContact(contact._id)}>\n                                            <FontAwesomeIcon icon={faTrashAlt} />\n                                        </button>\n                                    </div>\n                                </td>\n                            </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </Card></>}\n        </>\n    )\n}\n","import React,{ useState } from 'react'\nimport GradientBar from '../common/GradientBar';\nimport Card from '../common/Card';\nimport { Form, Formik } from 'formik';\nimport FormSuccess from '../FormSuccess'\nimport FormError from '../common/FormError'\nimport FormInput from '../FormInput'\nimport Label from '../common/Label';\nimport GradientButton from '../common/GradientButton';\nimport * as Yup from 'yup';\nimport { publicFetch } from '../../util/fetch';\n// import { Redirect } from 'react-router-dom';\n\nexport default function AddCampus(props) {\n\n\n    const AddContactSchema = Yup.object().shape({\n        name: Yup.string().required(\n            'Contact name is required'\n        ), \n        email: Yup.string().required(\n            'Email is required'\n          ),\n        phone: Yup.string().required(\n            'Phone is required'\n        )\n    });\n    const [addContactSuccess, setSignupSuccess] = useState();\n    const [addContactError, setSignupError] = useState();\n    // const [redirectOnContact, setRedirectOnLogin] = useState(false)\n    \n    \n    const [addLoading, setLoginLoading] = useState(false);\n    \n    const submitCredentials = async credentials => {\n        try {\n            setLoginLoading(true);\n            const { data } = await publicFetch.post(\n                `${props.idCampus}/contacts`,\n                credentials\n            );\n    \n            setSignupSuccess(data.message);\n            setSignupError('');\n        \n            setTimeout(() => {\n                window.location.reload();\n            }, 10);\n\n        }\n        catch (error) {\n            setLoginLoading(false);\n            const { data } = error.response;\n            setSignupError(data.message);\n            setSignupSuccess('');\n        }\n        finally{\n            props.showAddPanel()\n        }\n    };\n    return (\n        <>\n            {/* {redirectOnContact && <Redirect to=\"#\" />} */}\n            <section className=\"w-3/4 h-screen m-auto sm:pt-10\">\n                <GradientBar />\n                <Card>\n                    <div className=\"flex items-center justify-center py-7 px-2 sm:px-3 lg:px-3\">\n                        <div className=\"max-w-md w-full flex items-center justify-center\">\n                            <Formik\n                                initialValues={{\n                                    name: '',\n                                    email: '',\n                                    phone: '',\n                                }}\n                                onSubmit={values =>\n                                submitCredentials(values)\n                                }\n                                validationSchema={AddContactSchema}\n                            >\n                                {() => (\n                                <Form className=\"mt-8\">\n                                    {addContactSuccess && (\n                                    <FormSuccess text={addContactSuccess} />\n                                    )}\n                                    {addContactError && (\n                                    <FormError text={addContactError} />\n                                    )}\n                                    <input\n                                    type=\"hidden\"\n                                    name=\"remember\"\n                                    value=\"true\"\n                                    />\n                                    <div>\n                                        <div className=\"flex\">\n                                            <div className=\"mb-2 mr-2 w-64\">\n                                                <div className=\"mb-1\">\n                                                    <Label text=\"Name\" />\n                                                </div>\n                                                <FormInput\n                                                    ariaLabel=\"Name\"\n                                                    name=\"name\"\n                                                    type=\"text\"\n                                                    placeholder=\"Name\"\n                                                />\n                                            </div>\n                                            <div className=\"mb-2 ml-2 w-4/5\">\n                                                <div className=\"mb-1\">\n                                                    <Label text=\"Email\" />\n                                                </div>\n                                                <div>\n                                                <FormInput\n                                                    ariaLabel=\"Email\"\n                                                    name=\"email\"\n                                                    type=\"email\"\n                                                    placeholder=\"Email\"\n                                                />\n                                                </div>\n                                            </div>\n                                            <div className=\"mb-2 ml-3 w-64\">\n                                                <div className=\"mb-1\">\n                                                    <Label text=\"Phone\" />\n                                                </div>\n                                                <div>\n                                                <FormInput\n                                                    ariaLabel=\"Pnone\"\n                                                    name=\"phone\"\n                                                    type=\"phone\"\n                                                    placeholder=\"Phone\"\n                                                />\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                    <div className=\"mt-6 flex items-center justify-center\">\n                                    <GradientButton\n                                        type=\"submit\"\n                                        text=\"Save\"\n                                        loading={addLoading}\n                                    />\n                                    </div>\n                                </Form>\n                                )}\n                            </Formik>\n                        </div>\n                    </div>\n                </Card>\n            </section>\n        </>\n    );\n};\n","import React, {useState, useEffect} from 'react'\nimport TableContacts from '../components/contact/TableContacts'\nimport Button from '../components/common/GradientButton'\nimport AddContact from '../components/contact/AddContact'\nimport PageTitle from '../components/common/PageTitle';\nimport { publicFetch } from '../util/fetch';\n\nimport {\n    useParams\n} from \"react-router-dom\";\n\nexport default function Contacts() {\n\n    const [showAdd, setShowAdd] = useState(false);\n    const [contacts, setContacts ]=  useState([])\n\n    let { idCampus } = useParams();\n\n    useEffect(() => { \n        const listContacs = async () => {\n            const {data} = await publicFetch.get(\n                `${idCampus}/contacts`\n            )\n    \n            setContacts(data.contacts)\n        }\n\n        listContacs()\n    })\n\n    const showAddPanel =()=>{\n        setShowAdd(!showAdd)\n    }\n\n    return (\n        <>\n            <div className=\"container mx-auto px-4\">\n                <PageTitle title=\"Contacts\" />\n                <div className=\"py-8\">\n                    <div className=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\n                        <div>\n                            <TableContacts idCampus={idCampus} contacts={contacts}/>\n                        </div>\n                        <div className=\"container-add\">\n                            <Button text=\"Add > \" onClick={showAddPanel}/>\n                        </div>\n                        <div style={{display: `${showAdd ? 'block' : 'none'}`}}>\n                            <AddContact idCampus={idCampus} showPanel={showAddPanel}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n"],"sourceRoot":""}